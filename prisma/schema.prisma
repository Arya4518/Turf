generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement())
  username     String    @unique
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  bookings     Booking[]
  reviews      Review[]

  @@map("users")
}

model Owner {
  ownerId Int    @id
  name    String
  turfs   Turf[] @relation("OwnerTurf")

  @@map("owners")
}

model Admin {
  adminId Int  @id
  role    Role @default(admin)

  @@map("admins")
}

model Turf {
  turfId       Int       @id @default(autoincrement())
  ownerId      Int
  name         String
  location     String
  description  String?   @db.Text
  pricePerHour Float
  availability Boolean   @default(true)
  state        String?   @db.Text
  city         String?   @db.Text
  timing       String?   @db.Text
  bookings     Booking[]
  reviews      Review[]
  owner        Owner     @relation("OwnerTurf", fields: [ownerId], references: [ownerId])

  @@index([ownerId], map: "turfs_ownerId_fkey")
  @@map("turfs")
}

model Booking {
  bookingId   Int           @id @default(autoincrement())
  turfId      Int
  userId      Int
  bookingDate DateTime
  startTime   DateTime
  endTime     DateTime
  totalPrice  Float
  status      BookingStatus
  turf        Turf          @relation(fields: [turfId], references: [turfId])
  user        User          @relation(fields: [userId], references: [userId])

  @@index([turfId], map: "bookings_turfId_fkey")
  @@index([userId], map: "bookings_userId_fkey")
  @@map("bookings")
}

model Review {
  id        Int      @id @default(autoincrement())
  turfId    Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  turf      Turf     @relation(fields: [turfId], references: [turfId])
  user      User     @relation(fields: [userId], references: [userId])

  @@index([turfId], map: "reviews_turfId_fkey")
  @@index([userId], map: "reviews_userId_fkey")
  @@map("reviews")
}

enum Role {
  user
  admin
}

enum BookingStatus {
  confirmed
  pending
  cancelled
}
